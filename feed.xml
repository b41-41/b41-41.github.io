<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://til.b41.kr/</id><title>B41 TIL Blog</title><subtitle>A blog to summarize what you learned that day</subtitle> <updated>2023-05-19T22:32:08+09:00</updated> <author> <name>Da-Bin Jeong</name> <uri>https://til.b41.kr/</uri> </author><link rel="self" type="application/atom+xml" href="https://til.b41.kr/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko" href="https://til.b41.kr/"/> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> © 2023 Da-Bin Jeong </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>prevent app freezes when use JSON.parse</title><link href="https://til.b41.kr/posts/TIL-prevent_JSON_parse_stop_app/" rel="alternate" type="text/html" title="prevent app freezes when use JSON.parse" /><published>2023-05-19T00:00:00+09:00</published> <updated>2023-05-19T22:30:51+09:00</updated> <id>https://til.b41.kr/posts/TIL-prevent_JSON_parse_stop_app/</id> <content src="https://til.b41.kr/posts/TIL-prevent_JSON_parse_stop_app/" /> <author> <name>Da-Bin Jeong</name> </author> <category term="TIL" /> <category term="JavaScript" /> <summary> use JSON.parse Parse json to an object or value. but, Sometimes value to pars is not json. so, JSON.parse code causes error Use try catch to prevent apps from stopping at that time. example const parseJSON = (str) =&amp;gt; { try { return JSON.parse(str); } catch { console.error("str is not JSON::", str); return ''; //return empty string; } } Refer... </summary> </entry> <entry><title>type of R.compose</title><link href="https://til.b41.kr/posts/TIL-ramda_compose_type/" rel="alternate" type="text/html" title="type of R.compose" /><published>2023-05-18T00:00:00+09:00</published> <updated>2023-05-18T23:55:03+09:00</updated> <id>https://til.b41.kr/posts/TIL-ramda_compose_type/</id> <content src="https://til.b41.kr/posts/TIL-ramda_compose_type/" /> <author> <name>Da-Bin Jeong</name> </author> <category term="TIL" /> <category term="TypeScript" /> <category term="Ramda.js" /> <summary> Type of R.compose Type declaration is Union type. The first is the input value (argument). From the second, specify the type in the order of function 1 and function 2 (function 1, 2 is return type) example R.compose&amp;lt;[{[key: string]: number}], number, number, &amp;gt;( (val) =&amp;gt; val + 1, R.propOr(0, ['a']) )({a: 1, b: 2}); Reference ramda Documentation, compose(), https://ram... </summary> </entry> <entry><title>String.prototype.padStart(), object key에 변수 넣기</title><link href="https://til.b41.kr/posts/TIL-podStart_objectKey-0230214/" rel="alternate" type="text/html" title="String.prototype.padStart(), object key에 변수 넣기" /><published>2023-02-14T00:00:00+09:00</published> <updated>2023-02-14T00:00:00+09:00</updated> <id>https://til.b41.kr/posts/TIL-podStart_objectKey-0230214/</id> <content src="https://til.b41.kr/posts/TIL-podStart_objectKey-0230214/" /> <author> <name>Da-Bin Jeong</name> </author> <category term="TIL" /> <category term="JavaScript" /> <summary> String.prototype.padStart() - 문자열 시작을 다른 문자열로 채워서 정해진 길이를 만족하는 새로운 문자열 반환 - `String.podStart(문자길이(number), 채울 문자(string)` - 예) ``` const three = '3'; const hour = three.padStart(2, '0'); console.log(hour); //결과 : 03 ``` - padEnd()를 사용하면 오른쪽(끝부분)부터 문자가 채워진다. object key에 변수 넣는 방법 - 변수를 []로 감싼다. - (es6부터 지원) - 예) ``` const getKey... </summary> </entry> <entry><title>useWorker() - React 밖에서 따로 코드를 실행</title><link href="https://til.b41.kr/posts/TIL-useWorker-230109/" rel="alternate" type="text/html" title="useWorker() - React 밖에서 따로 코드를 실행" /><published>2023-02-09T00:00:00+09:00</published> <updated>2023-02-09T00:00:00+09:00</updated> <id>https://til.b41.kr/posts/TIL-useWorker-230109/</id> <content src="https://til.b41.kr/posts/TIL-useWorker-230109/" /> <author> <name>Da-Bin Jeong</name> </author> <category term="TIL" /> <category term="JavaScript" /> <category term="React" /> <summary> Web Woker - Web Worker는 브라우저에서 JavaScript 코드를 별도의 스레드에서 실행할 수 있도록 해주는 기술. [mdn using web wokers Link](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers) useWorker - https://github.com/alewin/useWorker - Web Worker를 쉽게 사용할 수 있게 만든 Hook ``` $npm install --save @koale/useworker ``` 장점 - 메인 스레드와 별도의 스레드에서 코드를 실행할 수 있게 됨 (마치 멀티 스레드처럼) - React 생명주기... </summary> </entry> <entry><title>Promise.race(), Promise.allSettled(), Iterable</title><link href="https://til.b41.kr/posts/TIL-blabla-230104/" rel="alternate" type="text/html" title="Promise.race(), Promise.allSettled(), Iterable" /><published>2023-01-04T00:00:00+09:00</published> <updated>2023-02-10T00:26:03+09:00</updated> <id>https://til.b41.kr/posts/TIL-blabla-230104/</id> <content src="https://til.b41.kr/posts/TIL-blabla-230104/" /> <author> <name>Da-Bin Jeong</name> </author> <category term="TIL" /> <category term="JavaScript" /> <summary> 들어가기 - 익숙하지 않았던 Promise 메서드 둘과 Iterable Promise.race() - parameter로 iterable이 들어감 - iterable 안에 있는 Promise 중에 가장 먼저 완료된 것을 실행 혹은 거부 함. Promise.allSettled() - parameter로 iterabled이 들어감 - iterable 안에 있는 모든 Pormise가 실행 혹은 거부된 후 결과값 객체를 반영 ``` const promise1 = Promise.resolve(3); const promise2 = new Promise((resolve, reject) =&amp;gt; setTimeout(reject, 100, 'foo')); const promises = [promise1... </summary> </entry> </feed>
